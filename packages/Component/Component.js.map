{"version":3,"sources":["Component.js"],"names":[],"mappings":"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","file":"Component.js","sourcesContent":["/**\n * marionette.toolkit - A collection of opinionated Backbone.Marionette extensions for large scale application architecture.\n * @version v0.4.0\n * @link https://github.com/RoundingWellOS/marionette.toolkit\n * @license MIT\n */\n'use strict';\n\nvar _ = require('underscore');\nvar Backbone = require('backbone');\nvar Marionette = require('backbone.marionette');\nvar StateClass = require('marionette.toolkit.state-class');\n\nvar Component = StateClass.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView}\n   * @default Marionette.ItemView\n   */\n  ViewClass: Marionette.ItemView,\n\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default 'view'\n   */\n  viewEventPrefix: 'view',\n\n  /**\n   * Options hash passed to the view when built.\n   * @type {Object|Function}\n   * @default '{}'\n   */\n  viewOptions: {},\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [stateAttrs] - Attributes to set on the state model.\n   * @param {Object} [options] - Settings for the component.\n   * @param {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView=} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor: function(stateAttrs, options){\n    options = options || {};\n\n    // Make defaults available to this\n    _.extend(this, _.pick(options, ['viewEventPrefix', 'ViewClass', 'viewOptions', 'region']));\n\n    StateClass.call(this, options);\n\n    this._setStateDefaults(stateAttrs);\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the state model attributes to the initial\n   * passed in attributes or any defaults set\n   *\n   * @private\n   * @method _setStateDefaults\n   * @memberOf Component\n   * @param {Object} [stateAttrs] - Attributes to set on the state model\n   */\n  _setStateDefaults: function(stateAttrs){\n    this.setState(stateAttrs, { silent: true });\n  },\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn: function(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show: function(viewOptions){\n    if(this._isShown) {\n      throw new Marionette.Error({\n        name: 'ComponentShowError',\n        message: 'Component has already been shown in a region.'\n      });\n    }\n\n    if(!this.region) {\n      throw new Marionette.Error({\n        name: 'ComponentRegionError',\n        message: 'Component has no defined region.'\n      });\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(this.region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass: function(options) {\n    options = options || {};\n\n    var ViewClass = this.getOption('ViewClass');\n\n    if (ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if (_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    } else {\n      throw new Marionette.Error({\n        name: 'InvalidViewClassError',\n        message: '\"ViewClass\" must be a view class or a function that returns a view class'\n      });\n    }\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView: function(options){\n    var ViewClass = this._getViewClass(options);\n\n    var viewOptions = this.mixinOptions(options);\n\n    var view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    // Show the view in the region\n    this.region.show(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @memberOf Component\n   * @param {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents: function(view){\n    var prefix = this.getOption('viewEventPrefix');\n\n    view.on('all', function() {\n      var args = _.toArray(arguments);\n      var rootEvent = args[0];\n\n      args[0] = prefix + ':' + rootEvent;\n      args.splice(1, 0, view);\n\n      this.triggerMethod.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Mixin stateModel from StateClass with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions: function(options){\n    var viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ stateModel: this.getState() }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView}\n   */\n  buildView: function(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy: function(){\n    if(this._shouldDestroy) {\n      StateClass.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion: function(options){\n      if(this.region) {\n        this.stopListening(this.region, 'empty');\n        this.region.empty(options);\n      }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy: function(options){\n      this._emptyRegion(options);\n\n      this._shouldDestroy = true;\n\n      this._destroy(options);\n  }\n});\n\nvar component = Component;\n\nmodule.exports = component;\n"],"sourceRoot":"/source/"}