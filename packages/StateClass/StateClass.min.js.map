/**
 * marionette.toolkit - A collection of opinionated Backbone.Marionette extensions for large scale application architecture.
 * @version v0.4.0
 * @link https://github.com/RoundingWellOS/marionette.toolkit
 * @license MIT
 */
{"version":3,"file":"StateClass.js","sources":["StateClass.js","/source/StateClass.js"],"names":["_","require","Backbone","Marionette","StateClass","Object","extend","StateModel","Model","constructor","options","this","pick","_getStateModel","_stateModel","result","bindEntityEvents","call","getOption","prototype","isFunction","Error","name","message","setState","set","apply","arguments","getState","attr","get","destroy","stopListening","state_class","module","exports"],"mappings":"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","sourceRoot":"/source/","sourcesContent":["/**\n * marionette.toolkit - A collection of opinionated Backbone.Marionette extensions for large scale application architecture.\n * @version v0.4.0\n * @link https://github.com/RoundingWellOS/marionette.toolkit\n * @license MIT\n */\n'use strict';\n\nvar _ = require('underscore');\nvar Backbone = require('backbone');\nvar Marionette = require('backbone.marionette');\n\nvar StateClass = Marionette.Object.extend({\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @constructs StateClass\n   * @param {Object} [options] - Settings for the stateClass.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to stateClass.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  constructor: function(options){\n    options = options || {};\n\n    // Make defaults available to this\n    _.extend(this, _.pick(options, ['StateModel', 'stateEvents', 'stateDefaults']));\n\n    var StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(_.result(this, 'stateDefaults'));\n\n    // Bind events from the _stateModel defined in stateEvents hash\n    this.bindEntityEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    Marionette.Object.call(this, options);\n  },\n\n  /**\n   * Get the StateClass StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @memberOf StateClass\n   * @returns {Backbone.Model}\n   */\n  _getStateModel: function(options){\n    var StateModel = this.getOption('StateModel');\n\n    if (StateModel.prototype instanceof Backbone.Model || StateModel === Backbone.Model) {\n      return StateModel;\n    } else if (_.isFunction(StateModel)) {\n      return StateModel.call(this, options);\n    } else {\n      throw new Marionette.Error({\n        name: 'InvalidStateModelError',\n        message: '\"StateModel\" must be a model class or a function that returns a model class'\n      });\n    }\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @memberOf StateClass\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState: function(){\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @memberOf StateClass\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState: function(attr){\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Destroy the stateClass and clean up any listeners on the _stateModel.\n   *\n   * @public\n   * @method destroy\n   * @memberOf StateClass\n   */\n  destroy: function(){\n    this._stateModel.stopListening();\n\n    Marionette.Object.prototype.destroy.apply(this, arguments);\n  }\n});\n\nvar state_class = StateClass;\n\nmodule.exports = state_class;\n","/**\n * marionette.toolkit - A collection of opinionated Backbone.Marionette extensions for large scale application architecture.\n * @version v0.4.0\n * @link https://github.com/RoundingWellOS/marionette.toolkit\n * @license MIT\n */\n'use strict';\n\nvar _ = require('underscore');\nvar Backbone = require('backbone');\nvar Marionette = require('backbone.marionette');\n\nvar StateClass = Marionette.Object.extend({\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @constructs StateClass\n   * @param {Object} [options] - Settings for the stateClass.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to stateClass.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  constructor: function(options){\n    options = options || {};\n\n    // Make defaults available to this\n    _.extend(this, _.pick(options, ['StateModel', 'stateEvents', 'stateDefaults']));\n\n    var StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(_.result(this, 'stateDefaults'));\n\n    // Bind events from the _stateModel defined in stateEvents hash\n    this.bindEntityEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    Marionette.Object.call(this, options);\n  },\n\n  /**\n   * Get the StateClass StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @memberOf StateClass\n   * @returns {Backbone.Model}\n   */\n  _getStateModel: function(options){\n    var StateModel = this.getOption('StateModel');\n\n    if (StateModel.prototype instanceof Backbone.Model || StateModel === Backbone.Model) {\n      return StateModel;\n    } else if (_.isFunction(StateModel)) {\n      return StateModel.call(this, options);\n    } else {\n      throw new Marionette.Error({\n        name: 'InvalidStateModelError',\n        message: '\"StateModel\" must be a model class or a function that returns a model class'\n      });\n    }\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @memberOf StateClass\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState: function(){\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @memberOf StateClass\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState: function(attr){\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Destroy the stateClass and clean up any listeners on the _stateModel.\n   *\n   * @public\n   * @method destroy\n   * @memberOf StateClass\n   */\n  destroy: function(){\n    this._stateModel.stopListening();\n\n    Marionette.Object.prototype.destroy.apply(this, arguments);\n  }\n});\n\nvar state_class = StateClass;\n\nmodule.exports = state_class;\n"]}