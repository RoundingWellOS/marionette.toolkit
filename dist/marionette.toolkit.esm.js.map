{"version":3,"file":"marionette.toolkit.esm.js","sources":["src/mixins/state.js","src/mixins/child-apps.js","src/mixins/event-listeners.js","src/mixins/view-events.js","src/app.js","src/component.js","src/marionette.toolkit.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n /**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.MnObject or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    this._initState(options);\n    this.delegateStateEvents();\n\n    return this;\n  },\n\n  /**\n   * @private\n   * @method _initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   */\n  _initState(options) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   *\n   * @public\n   * @method delegateStateEvents\n   */\n  delegateStateEvents() {\n    this.undelegateStateEvents();\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events on _stateModel\n   *\n   * @public\n   * @method undelegateStateEvents\n   */\n  undelegateStateEvents() {\n    this.unbindEvents(this._stateModel);\n\n    return this;\n  },\n\n  /**\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Clean up destroy event handler, remove any listeners on _stateModel\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.undelegateStateEvents();\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Error('\"StateModel\" must be a model class or a function that returns a model class');\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Toggle a property on the _stateModel.\n   *\n   * @public\n   * @method toggleState\n   * @param {String} attr - Attribute name of stateModel.\n   * @param {val} [value] - Attribute value.\n   * @returns {Backbone.Model} - The _stateModel or attribute value.\n   */\n  toggleState(attr, val) {\n    if(arguments.length > 1) return this._stateModel.set(attr, !!val);\n\n    return this._stateModel.set(attr, !this._stateModel.get(attr));\n  },\n\n  /**\n   * Check if _stateModel has a property\n   *\n   * @public\n   * @method hasState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Boolean}\n   */\n  hasState(attr) {\n    return this._stateModel.has(attr);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n /**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n  },\n\n  /**\n   * Finds `regionName` and `getOptions` for the childApp\n   *\n   * @private\n   * @method _getChildStartOpts\n   */\n  _getChildStartOpts(childApp) {\n    const tkOpts = childApp._tkOpts || {};\n\n    const opts = {\n      region: this.getRegion(tkOpts.regionName)\n    };\n\n    _.each(tkOpts.getOptions, opt => {\n      opts[opt] = this.getOption(opt);\n    });\n\n    return opts;\n  },\n\n  /**\n   * Starts a `childApp`\n   *\n   * @private\n   * @method _startChildApp\n   */\n  _startChildApp(childApp, options) {\n    const opts = this._getChildStartOpts(childApp);\n    return childApp.start(_.extend(opts, options));\n  },\n\n  /**\n   * Handles explicit boolean values of restartWithParent\n   * restartWithParent === false does nothing\n   *\n   * @private\n   * @method _shouldStartWithRestart\n   */\n  _shouldActWithRestart(childApp, action) {\n    if(!this._isRestarting) return true;\n    const restartWithParent = _.result(childApp, 'restartWithParent');\n    if(restartWithParent === true) return true;\n    if(restartWithParent !== false && _.result(childApp, action)) return true;\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    const action = 'startWithParent';\n    _.each(this._childApps, childApp => {\n      if(!this._shouldActWithRestart(childApp, action)) return;\n      if(!this._isRestarting && !_.result(childApp, action)) return;\n      this._startChildApp(childApp);\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    const action = 'stopWithParent';\n    _.each(this._childApps, childApp => {\n      if(!this._shouldActWithRestart(childApp, action)) return;\n      if(!this._isRestarting && !_.result(childApp, action)) return;\n      childApp.stop();\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {Object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp(appName, options) {\n    const childApp = this.getChildApp(appName);\n    return this._startChildApp(childApp, options);\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @param {Object} options - Stop options for app\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp(appName, options) {\n    return this.getChildApp(appName).stop(options);\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass', 'regionName', 'getOptions');\n\n    const app = this.buildApp(AppClass, options);\n\n    app._tkOpts = _.pick(appConfig, 'regionName', 'getOptions');\n\n    return app;\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Error(`A child App with name \"${ appName }\" has already been added.`);\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, _.bind(function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this));\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Error('App build failed.  Incorrect configuration.');\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    // Listener setup relative to the childApp's running state (using _on)\n    childApp._on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      this._startChildApp(childApp);\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, _.bind(function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this));\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport { MnObject } from 'backbone.marionette';\n\n /**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, _.bind(function(args) {\n      this.off.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, _.bind(function(args) {\n      this.stopListening.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return MnObject.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _on\n   * @returns {EventListeners}\n   */\n  _on: MnObject.prototype.on,\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return MnObject.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _listenTo\n   * @returns {EventListeners}\n   */\n  _listenTo: MnObject.prototype.listenTo,\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return MnObject.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\n\nexport default {\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default false\n   */\n  viewEventPrefix: false,\n\n  /**\n   * Constructs hashes and options for view event proxy\n   *\n   * @private\n   * @method _buildEventProxies\n   */\n  _buildEventProxies() {\n    const viewEvents = _.result(this, 'viewEvents') || {};\n    this._viewEvents = this.normalizeMethods(viewEvents);\n    this._viewTriggers = _.result(this, 'viewTriggers') || {};\n    this._viewEventPrefix = _.result(this, 'viewEventPrefix');\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  /**\n   * Event handler for view proxy\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _childViewEventHandler\n   * @param {String} - event name\n   */\n  _childViewEventHandler(eventName, ...args) {\n    const viewEvents = this._viewEvents;\n\n    if(_.isFunction(viewEvents[eventName])) {\n      viewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const viewTriggers = this._viewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if(_.isString(viewTriggers[eventName])) {\n      this.triggerMethod(viewTriggers[eventName], ...args);\n    }\n\n    const prefix = this._viewEventPrefix;\n\n    if(prefix !== false) {\n      const viewEventName = `${ prefix }:${ eventName }`;\n\n      this.triggerMethod(viewEventName, ...args);\n    }\n  }\n};\n","import _ from 'underscore';\nimport { Application } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'startWithParent',\n  'restartWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy',\n  'StateModel',\n  'stateEvents',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers'\n];\n\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Application.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Internal flag indiciate when `App` is in the process of stopping then starting.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRestarting: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n\n  /**\n   * Set this to determine if a parent `App` should maintain the child's\n   * lifecycle during a restart.\n   *\n   * @type {Boolean|Function}\n   * @default null\n   */\n  restartWithParent: null,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.restartWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ChildAppsMixin\n    this._initChildApps(options);\n\n    Application.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Error('App has already been destroyed and cannot be used.');\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Gets the value of internal `_isRestarting` flag\n   *\n   * @public\n   * @method isRestarting\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRestarting() {\n    return this._isRestarting;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options = {}) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    if(options.region) {\n      this.setRegion(options.region);\n    }\n\n    if(options.view) {\n      this.setView(options.view);\n    }\n\n    // StateMixin\n    this._initState(options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    this.triggerMethod('before:start', options);\n\n    this._isRunning = true;\n\n    this._bindRunningEvents();\n\n    this.triggerStart(options);\n\n    return this;\n  },\n\n  /**\n   * Sets up region, view, and state events.\n   * To only be called after `isRunning` is true\n   *\n   * @private\n   * @method _bindRunningEvents\n   * @memberOf App\n   */\n  _bindRunningEvents() {\n    if(this._region) {\n      this._regionEventMonitor();\n    }\n\n    if(this._view) {\n      this._proxyViewEvents(this._view);\n    }\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Sets the app lifecycle to not running\n   * then sets the app lifecycle to running with ending state\n   *\n   * @public\n   * @method restart\n   * @memberOf App\n   * @returns {App}\n   */\n  restart() {\n    const state = this.getState().attributes;\n\n    this._isRestarting = true;\n    this.stop().start({ state });\n    this._isRestarting = false;\n\n    return this;\n  },\n\n  /**\n   * Starts children and triggers start event\n   * For calling within `triggerStart`\n   *\n   * @public\n   * @method finallyStart\n   * @memberOf App\n   * @event App#start - passes any arguments\n   * @returns\n   */\n  finallyStart() {\n    this._startChildApps();\n    this.triggerMethod('start', ...arguments);\n  },\n\n  /**\n   * Triggers start event via finallyStart.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @returns\n   */\n  triggerStart(options) {\n    this.finallyStart(options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._stopChildApps();\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    // Running events are cleaned up after stop so that\n    // `stop` event handlers still fire\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return this;\n    }\n\n    this.stop();\n\n    this._removeView();\n\n    this._destroyChildApps();\n\n    Application.prototype.destroy.apply(this, arguments);\n\n    return this;\n  },\n\n  /**\n   * Set the Application's Region\n   *\n   * @public\n   * @method setRegion\n   * @memberOf App\n   * @param {Region} [region] - Region to use with the app\n   * @returns {Region}\n   */\n  setRegion(region) {\n    if(this._region) {\n      this.stopListening(this._region);\n    }\n\n    this._region = region;\n\n    if(region.currentView) {\n      this.setView(region.currentView);\n    }\n\n    if(this._isRunning) {\n      this._regionEventMonitor();\n    }\n\n    return region;\n  },\n\n  /**\n   * Monitors the apps region before:show event so the region's view\n   * is available to the app\n   *\n   * @private\n   * @method _regionEventMonitor\n   * @memberOf App\n   */\n  _regionEventMonitor() {\n    this.listenTo(this._region, {\n      'before:show': this._onBeforeShow,\n      'empty': this._onEmpty\n    });\n  },\n\n  /**\n   * Region monitor handler which sets the app's view to the region's view\n   *\n   * @private\n   * @method _onBeforeShow\n   * @memberOf App\n   */\n  _onBeforeShow(region, view) {\n    this.setView(view);\n  },\n\n  /**\n   * Region monitor handler which empties the region's view\n   *\n   * @private\n   * @method _onEmpty\n   * @memberOf App\n   */\n  _onEmpty(region, view) {\n    if(view !== this._view) return;\n\n    this._removeView();\n  },\n\n  /**\n   * Region monitor handler which deletes the region's view and listeners to view\n   *\n   * @private\n   * @method _removeView\n   * @memberOf App\n   */\n  _removeView() {\n    if(this._view) {\n      this.stopListening(this._view);\n      delete this._view;\n    }\n  },\n\n  /**\n   * Get the Application's Region or\n   * Get a region from the Application's View\n   *\n   * @public\n   * @method getRegion\n   * @memberOf App\n   * @param {String} [regionName] - Optional regionName to get from the view\n   * @returns {Region}\n   */\n  getRegion(regionName) {\n    if(!regionName) {\n      return this._region;\n    }\n\n    return this.getView().getRegion(regionName);\n  },\n\n  /**\n   * Set the Application's View\n   *\n   * @public\n   * @method setView\n   * @memberOf App\n   * @param {View} [view] - View to use with the app\n   * @returns {View}\n   */\n  setView(view) {\n    if(this._view === view) {\n      return view;\n    }\n\n    if(this._view) {\n      this.stopListening(this._view);\n    }\n\n    this._view = view;\n\n    // ViewEventsMixin\n    if(this._isRunning) {\n      this._proxyViewEvents(view);\n    }\n\n    // Internal non-running listener\n    this._listenTo(this._view, 'destroy', this._removeView);\n\n    return view;\n  },\n\n  /**\n   * Get the Application's View\n   *\n   * @public\n   * @method getView\n   * @memberOf App\n   * @returns {View}\n   */\n  getView() {\n    return this._view || this._region && this._region.currentView;\n  },\n\n  /**\n   * Shows a view in the Application's region\n   *\n   * @public\n   * @method showView\n   * @param {View} view - Child view instance defaults to App's view\n   * @param {...args} Additional args that get passed along\n   * @returns {View}\n   */\n  showView(view = this._view, ...args) {\n    this.getRegion().show(view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Shows a view in the region of the app's view\n   *\n   * @public\n   * @method showChildView\n   * @param {String} regionName - Name of region to show in\n   * @param {View} view - Child view instance\n   * @param {...args} Additional args that get passed along\n   * @returns {View} - Child view instance\n   */\n  showChildView(regionName, view, ...args) {\n    this.getView().showChildView(regionName, view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Returns view from the App view by region name.\n   *\n   * @public\n   * @method getChildView\n   * @param {String} regionName - Name of region to get view from\n   * @returns {View}\n   */\n  getChildView(regionName) {\n    return this.getView().getChildView(regionName);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin, ViewEventsMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport { MnObject, View } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers',\n  'viewOptions',\n  'region'\n];\n\n/**\n * Reusable Marionette.MnObject with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = MnObject.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: View,\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    // StateMixin\n    this._initState(options);\n\n    MnObject.call(this, options);\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions) {\n    const region = this.getRegion();\n\n    if(this._isShown) {\n      throw new Error('Component has already been shown in a region.');\n    }\n\n    if(!region) {\n      throw new Error('Component has no defined region.');\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Returns component region.\n   *\n   * @public\n   * @method getRegion\n   * @memberOf Component\n   * @returns Component region\n   */\n  getRegion() {\n    return this.region;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Error('\"ViewClass\" must be a view class or a function that returns a view class');\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    // ViewEventMixin\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    this.showView(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Override this to change how the component's view is shown in the region\n   *\n   * @public\n   * @method showView\n   * @memberOf Component\n   * @param {Object} view - view built from a viewClass and viewOptions\n   */\n  showView(view) {\n    // Show the view in the region\n    this.getRegion().show(view);\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy() {\n    if(this._shouldDestroy) {\n      MnObject.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion(options) {\n    const region = this.getRegion();\n\n    if(region) {\n      this.stopListening(region, 'empty');\n      region.empty(options);\n    }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy(options) {\n    this._emptyRegion(options);\n\n    this._shouldDestroy = true;\n\n    this._destroy(options);\n\n    return this;\n  }\n});\n\n_.extend(Component.prototype, StateMixin, ViewEventsMixin);\n\nexport default Component;\n","import _ from 'underscore';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\n/**\n * @module Toolkit\n */\n\nconst VERSION = '<%VERSION%>';\n\nfunction MixinState(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n}\n\nexport {\n  MixinState,\n  VERSION,\n  StateMixin,\n  App,\n  Component\n};\n\nexport default {\n  MixinState,\n  VERSION,\n  StateMixin,\n  App,\n  Component\n};\n"],"names":["ClassOptions","Backbone","Model","options","_initState","delegateStateEvents","mergeOptions","_removeEventHandlers","StateModel","_getStateModel","_stateModel","state","_setEventHandlers","undelegateStateEvents","bindEvents","_","result","unbindEvents","on","_destroyState","stopListening","off","prototype","isFunction","call","Error","set","apply","arguments","defaults","attr","get","val","length","has","_childApps","childApps","addChildApps","childApp","tkOpts","_tkOpts","opts","getRegion","regionName","each","getOptions","opt","getOption","_getChildStartOpts","start","extend","action","_isRestarting","restartWithParent","_shouldActWithRestart","_startChildApp","stop","appName","getChildApp","destroy","appConfig","AppClass","omit","app","buildApp","pick","isObject","_buildAppFromObject","childAppOptions","bind","addChildApp","_ensureAppIsUnique","_buildApp","_name","_on","partial","_removeChildApp","isRunning","clone","getChildApps","removeChildApp","preventDestroy","_runningEvents","args","_runningListeningTo","_isRunning","push","MnObject","listenTo","listenToOnce","viewEvents","_viewEvents","normalizeMethods","_viewTriggers","_viewEventPrefix","view","_childViewEventHandler","eventName","viewTriggers","isString","triggerMethod","prefix","viewEventName","App","Application","_initChildApps","_isDestroyed","_ensureAppIsIntact","region","setRegion","setView","_buildEventProxies","_bindRunningEvents","triggerStart","_region","_regionEventMonitor","_view","_proxyViewEvents","getState","attributes","_startChildApps","finallyStart","_stopChildApps","_stopRunningListeners","_stopRunningEvents","_removeView","_destroyChildApps","currentView","_onBeforeShow","_onEmpty","getView","_listenTo","show","showChildView","getChildView","StateMixin","ChildAppsMixin","EventListenersMixin","ViewEventsMixin","Component","View","viewOptions","_isShown","renderView","_destroy","ViewClass","_getViewClass","mixinOptions","buildView","_shouldDestroy","showView","empty","_emptyRegion","VERSION","MixinState","classDefinition","_StateMixin"],"mappings":"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"}