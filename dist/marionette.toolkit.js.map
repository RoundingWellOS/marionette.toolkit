{"version":3,"file":"marionette.toolkit.js","sources":["src/mixins/state.js","src/mixins/child-apps.js","src/mixins/event-listeners.js","src/app.js","src/component.js","src/marionette.toolkit.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n /**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.Object or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events and remove any listeners on _stateModel\n   * Clean up destroy event handler\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.unbindEntityEvents(this._stateModel);\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.bindEntityEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidStateModelError',\n      message: '\"StateModel\" must be a model class or a function that returns a model class'\n    });\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n /**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n\n    this._initListeners();\n  },\n\n  /**\n   * The child apps should be handled while the app is running;\n   * After start, before stop, and before destroy.\n   *\n   * @private\n   * @method _initListeners\n   */\n  _initListeners() {\n    this.on({\n      'start': this._startChildApps,\n      'before:stop': this._stopChildApps,\n      'before:destroy': this._destroyChildApps\n    });\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'startWithParent')) {\n        childApp.start();\n      }\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'stopWithParent')) {\n        childApp.stop();\n      }\n    });\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass');\n\n    return this.buildApp(AppClass, options);\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Marionette.Error({\n        name: 'DuplicateChildAppError',\n        message: `A child App with name \"${ appName }\" has already been added.`\n      });\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this);\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Marionette.Error({\n        name: 'AddChildAppError',\n        message: 'App build failed.  Incorrect configuration.'\n      });\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    childApp.on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      childApp.start();\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this);\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\n /**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, function(args) {\n      this.off.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, function(args) {\n      this.stopListening.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return Marionette.Object.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return Marionette.Object.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return Marionette.Object.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\n\nconst ClassOptions = [\n  'startWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy'\n];\n\n/**\n * Marionette.Object with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Marionette.Object.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Internal flag indiciate when `App` has been destroyed\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isDestroyed: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    _.bindAll(this, 'start', 'stop');\n\n    this.mergeOptions(options, ClassOptions);\n\n    this.initState(options);\n    this._initChildApps(options);\n\n    Marionette.Object.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Marionette.Error({\n        name: 'AppDestroyedError',\n        message: 'App has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:start', options);\n\n    this._isRunning = true;\n\n    this.triggerStart(options);\n\n    return this;\n  },\n\n  /**\n   * Triggers start event.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#start - passes options\n   * @returns\n   */\n  triggerStart(options) {\n    this.triggerMethod('start', options);\n  },\n\n  /**\n   * \"Restarts the app\" by first stoping app, reinitializing state, and then starting the app again\n   *\n   *\n   * @public\n   * @method restart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @returns {App}\n   */\n  restart(options) {\n    this.stop(options);\n    this.initState(options);\n    this.start(options);\n\n    return this;\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Gets the value of internal `_isDestroyed` flag\n   *\n   * @public\n   * @method isDestroyed\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isDestroyed() {\n    return this._isDestroyed;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return;\n    }\n\n    this.stop();\n\n    Marionette.Object.prototype.destroy.apply(this, arguments);\n\n    this._isDestroyed = true;\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\n\nconst ClassOpions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewOptions',\n  'region'\n];\n/**\n * Reusable Marionette.Object with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = Marionette.Object.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView}\n   * @default Marionette.ItemView\n   */\n  ViewClass: Marionette.ItemView,\n\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default 'view'\n   */\n  viewEventPrefix: 'view',\n\n  /**\n   * Options hash passed to the view when built.\n   * @type {Object|Function}\n   * @default '{}'\n   */\n  viewOptions: {},\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView=} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOpions);\n\n    this.initState(options);\n\n    Marionette.Object.call(this, options);\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions) {\n    if(this._isShown) {\n      throw new Marionette.Error({\n        name: 'ComponentShowError',\n        message: 'Component has already been shown in a region.'\n      });\n    }\n\n    if(!this.region) {\n      throw new Marionette.Error({\n        name: 'ComponentRegionError',\n        message: 'Component has no defined region.'\n      });\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(this.region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidViewClassError',\n      message: '\"ViewClass\" must be a view class or a function that returns a view class'\n    });\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    // Show the view in the region\n    this.region.show(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @memberOf Component\n   * @param {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    const prefix = this.viewEventPrefix;\n\n    view.on('all', function() {\n      const args = _.toArray(arguments);\n      const rootEvent = args[0];\n\n      args[0] = `${ prefix }:${ rootEvent }`;\n      args.splice(1, 0, view);\n\n      this.triggerMethod.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.ItemView|Mn.CollectionView|Mn.CompositeView|Mn.LayoutView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy() {\n    if(this._shouldDestroy) {\n      Marionette.Object.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion(options) {\n    if(this.region) {\n      this.stopListening(this.region, 'empty');\n      this.region.empty(options);\n    }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy(options) {\n    this._emptyRegion(options);\n\n    this._shouldDestroy = true;\n\n    this._destroy(options);\n  }\n});\n\n_.extend(Component.prototype, StateMixin);\n\nexport default Component;\n","import Marionette from 'backbone.marionette';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\n/**\n * @module Toolkit\n */\n\nconst previousToolkit = Marionette.Toolkit;\n\nconst Toolkit = Marionette.Toolkit = {};\n\nToolkit.noConflict = function() {\n  Marionette.Toolkit = previousToolkit;\n  return this;\n};\n\nToolkit.MixinState = function(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n};\n\nToolkit.VERSION = '<%VERSION%>';\n\nToolkit.StateMixin = StateMixin;\n\nToolkit.App = App;\n\nToolkit.Component = Component;\n\nexport default Toolkit;\n"],"names":["_","ClassOptions"],"mappings":"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","sourceRoot":"/source/"}