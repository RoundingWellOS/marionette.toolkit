{"version":3,"file":"marionette.toolkit.js","sources":["src/mixins/state.js","src/mixins/child-apps.js","src/mixins/event-listeners.js","src/mixins/view-events.js","src/app.js","src/component.js","src/marionette.toolkit.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n /**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.MnObject or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    this._initState(options);\n    this.delegateStateEvents();\n\n    return this;\n  },\n\n  /**\n   * @private\n   * @method _initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   */\n  _initState(options) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   *\n   * @public\n   * @method delegateStateEvents\n   */\n  delegateStateEvents() {\n    this.undelegateStateEvents();\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events on _stateModel\n   *\n   * @public\n   * @method undelegateStateEvents\n   */\n  undelegateStateEvents() {\n    this.unbindEvents(this._stateModel);\n\n    return this;\n  },\n\n  /**\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Clean up destroy event handler, remove any listeners on _stateModel\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.undelegateStateEvents();\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Error('\"StateModel\" must be a model class or a function that returns a model class');\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Toggle a property on the _stateModel.\n   *\n   * @public\n   * @method toggleState\n   * @param {String} attr - Attribute name of stateModel.\n   * @param {val} [value] - Attribute value.\n   * @returns {Backbone.Model} - The _stateModel or attribute value.\n   */\n  toggleState(attr, val) {\n    if(arguments.length > 1) return this._stateModel.set(attr, !!val);\n\n    return this._stateModel.set(attr, !this._stateModel.get(attr));\n  },\n\n  /**\n   * Check if _stateModel has a property\n   *\n   * @public\n   * @method hasState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Boolean}\n   */\n  hasState(attr) {\n    return this._stateModel.has(attr);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n /**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n  },\n\n  /**\n   * Finds `regionName` and `getOptions` for the childApp\n   *\n   * @private\n   * @method _getChildStartOpts\n   */\n  _getChildStartOpts(childApp) {\n    const tkOpts = childApp._tkOpts || {};\n\n    const opts = {\n      region: this.getRegion(tkOpts.regionName)\n    };\n\n    _.each(tkOpts.getOptions, opt => {\n      opts[opt] = this.getOption(opt);\n    });\n\n    return opts;\n  },\n\n  /**\n   * Starts a `childApp`\n   *\n   * @private\n   * @method _startChildApp\n   */\n  _startChildApp(childApp, options) {\n    const opts = this._getChildStartOpts(childApp);\n    return childApp.start(_.extend(opts, options));\n  },\n\n  /**\n   * Handles explicit boolean values of restartWithParent\n   * restartWithParent === false does nothing\n   *\n   * @private\n   * @method _shouldStartWithRestart\n   */\n  _shouldActWithRestart(childApp, action) {\n    if(!this._isRestarting) return true;\n    const restartWithParent = _.result(childApp, 'restartWithParent');\n    if(restartWithParent === true) return true;\n    if(restartWithParent !== false && _.result(childApp, action)) return true;\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    const action = 'startWithParent';\n    _.each(this._childApps, childApp => {\n      if(!this._shouldActWithRestart(childApp, action)) return;\n      if(!this._isRestarting && !_.result(childApp, action)) return;\n      this._startChildApp(childApp);\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    const action = 'stopWithParent';\n    _.each(this._childApps, childApp => {\n      if(!this._shouldActWithRestart(childApp, action)) return;\n      if(!this._isRestarting && !_.result(childApp, action)) return;\n      childApp.stop();\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {Object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp(appName, options) {\n    const childApp = this.getChildApp(appName);\n    return this._startChildApp(childApp, options);\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @param {Object} options - Stop options for app\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp(appName, options) {\n    return this.getChildApp(appName).stop(options);\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass', 'regionName', 'getOptions');\n\n    const app = this.buildApp(AppClass, options);\n\n    app._tkOpts = _.pick(appConfig, 'regionName', 'getOptions');\n\n    return app;\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Error(`A child App with name \"${ appName }\" has already been added.`);\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, _.bind(function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this));\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Error('App build failed.  Incorrect configuration.');\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    // Listener setup relative to the childApp's running state (using _on)\n    childApp._on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      this._startChildApp(childApp);\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, _.bind(function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this));\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport { MnObject } from 'backbone.marionette';\n\n /**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, _.bind(function(args) {\n      this.off.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, _.bind(function(args) {\n      this.stopListening.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return MnObject.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _on\n   * @returns {EventListeners}\n   */\n  _on: MnObject.prototype.on,\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return MnObject.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _listenTo\n   * @returns {EventListeners}\n   */\n  _listenTo: MnObject.prototype.listenTo,\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return MnObject.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\n\nexport default {\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default false\n   */\n  viewEventPrefix: false,\n\n  /**\n   * Constructs hashes and options for view event proxy\n   *\n   * @private\n   * @method _buildEventProxies\n   */\n  _buildEventProxies() {\n    const viewEvents = _.result(this, 'viewEvents') || {};\n    this._viewEvents = this.normalizeMethods(viewEvents);\n    this._viewTriggers = _.result(this, 'viewTriggers') || {};\n    this._viewEventPrefix = _.result(this, 'viewEventPrefix');\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  /**\n   * Event handler for view proxy\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _childViewEventHandler\n   * @param {String} - event name\n   */\n  _childViewEventHandler(eventName, ...args) {\n    const viewEvents = this._viewEvents;\n\n    if(_.isFunction(viewEvents[eventName])) {\n      viewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const viewTriggers = this._viewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if(_.isString(viewTriggers[eventName])) {\n      this.triggerMethod(viewTriggers[eventName], ...args);\n    }\n\n    const prefix = this._viewEventPrefix;\n\n    if(prefix !== false) {\n      const viewEventName = `${ prefix }:${ eventName }`;\n\n      this.triggerMethod(viewEventName, ...args);\n    }\n  }\n};\n","import _ from 'underscore';\nimport { Application } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'startWithParent',\n  'restartWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy',\n  'StateModel',\n  'stateEvents',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers'\n];\n\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Application.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Internal flag indiciate when `App` is in the process of stopping then starting.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRestarting: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n\n  /**\n   * Set this to determine if a parent `App` should maintain the child's\n   * lifecycle during a restart.\n   *\n   * @type {Boolean|Function}\n   * @default null\n   */\n  restartWithParent: null,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.restartWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ChildAppsMixin\n    this._initChildApps(options);\n\n    Application.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Error('App has already been destroyed and cannot be used.');\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Gets the value of internal `_isRestarting` flag\n   *\n   * @public\n   * @method isRestarting\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRestarting() {\n    return this._isRestarting;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options = {}) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    if(options.region) {\n      this.setRegion(options.region);\n    }\n\n    if(options.view) {\n      this.setView(options.view);\n    }\n\n    // StateMixin\n    this._initState(options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    this.triggerMethod('before:start', options);\n\n    this._isRunning = true;\n\n    this._bindRunningEvents();\n\n    this.finallyStart(options);\n\n    return this;\n  },\n\n  /**\n   * Sets up region, view, and state events.\n   * To only be called after `isRunning` is true\n   *\n   * @private\n   * @method _bindRunningEvents\n   * @memberOf App\n   */\n  _bindRunningEvents() {\n    if(this._region) {\n      this._regionEventMonitor();\n    }\n\n    if(this._view) {\n      this._proxyViewEvents(this._view);\n    }\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Sets the app lifecycle to not running\n   * then sets the app lifecycle to running with ending state\n   *\n   * @public\n   * @method restart\n   * @memberOf App\n   * @returns {App}\n   */\n  restart() {\n    const state = this.getState().attributes;\n\n    this._isRestarting = true;\n    this.stop().start({ state });\n    this._isRestarting = false;\n\n    return this;\n  },\n\n  /**\n   * Starts children and triggers start event\n   * For calling within `finallyStart`\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @event App#start - passes any arguments\n   * @returns\n   */\n  triggerStart() {\n    this._startChildApps();\n    this.triggerMethod('start', ...arguments);\n  },\n\n  /**\n   * Triggers start event.\n   * Override to introduce async start\n   *\n   * @public\n   * @method finallyStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @returns\n   */\n  finallyStart(options) {\n    this.triggerStart(options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._stopChildApps();\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    // Running events are cleaned up after stop so that\n    // `stop` event handlers still fire\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return this;\n    }\n\n    this.stop();\n\n    this._removeView();\n\n    this._destroyChildApps();\n\n    Application.prototype.destroy.apply(this, arguments);\n\n    return this;\n  },\n\n  /**\n   * Set the Application's Region\n   *\n   * @public\n   * @method setRegion\n   * @memberOf App\n   * @param {Region} [region] - Region to use with the app\n   * @returns {Region}\n   */\n  setRegion(region) {\n    if(this._region) {\n      this.stopListening(this._region);\n    }\n\n    this._region = region;\n\n    if(region.currentView) {\n      this.setView(region.currentView);\n    }\n\n    if(this._isRunning) {\n      this._regionEventMonitor();\n    }\n\n    return region;\n  },\n\n  /**\n   * Monitors the apps region before:show event so the region's view\n   * is available to the app\n   *\n   * @private\n   * @method _regionEventMonitor\n   * @memberOf App\n   */\n  _regionEventMonitor() {\n    this.listenTo(this._region, {\n      'before:show': this._onBeforeShow,\n      'empty': this._onEmpty\n    });\n  },\n\n  /**\n   * Region monitor handler which sets the app's view to the region's view\n   *\n   * @private\n   * @method _onBeforeShow\n   * @memberOf App\n   */\n  _onBeforeShow(region, view) {\n    this.setView(view);\n  },\n\n  /**\n   * Region monitor handler which empties the region's view\n   *\n   * @private\n   * @method _onEmpty\n   * @memberOf App\n   */\n  _onEmpty(region, view) {\n    if(view !== this._view) return;\n\n    this._removeView();\n  },\n\n  /**\n   * Region monitor handler which deletes the region's view and listeners to view\n   *\n   * @private\n   * @method _removeView\n   * @memberOf App\n   */\n  _removeView() {\n    if(this._view) {\n      this.stopListening(this._view);\n      delete this._view;\n    }\n  },\n\n  /**\n   * Get the Application's Region or\n   * Get a region from the Application's View\n   *\n   * @public\n   * @method getRegion\n   * @memberOf App\n   * @param {String} [regionName] - Optional regionName to get from the view\n   * @returns {Region}\n   */\n  getRegion(regionName) {\n    if(!regionName) {\n      return this._region;\n    }\n\n    return this.getView().getRegion(regionName);\n  },\n\n  /**\n   * Set the Application's View\n   *\n   * @public\n   * @method setView\n   * @memberOf App\n   * @param {View} [view] - View to use with the app\n   * @returns {View}\n   */\n  setView(view) {\n    if(this._view === view) {\n      return view;\n    }\n\n    if(this._view) {\n      this.stopListening(this._view);\n    }\n\n    this._view = view;\n\n    // ViewEventsMixin\n    if(this._isRunning) {\n      this._proxyViewEvents(view);\n    }\n\n    // Internal non-running listener\n    this._listenTo(this._view, 'destroy', this._removeView);\n\n    return view;\n  },\n\n  /**\n   * Get the Application's View\n   *\n   * @public\n   * @method getView\n   * @memberOf App\n   * @returns {View}\n   */\n  getView() {\n    return this._view || this._region && this._region.currentView;\n  },\n\n  /**\n   * Shows a view in the Application's region\n   *\n   * @public\n   * @method showView\n   * @param {View} view - Child view instance defaults to App's view\n   * @param {...args} Additional args that get passed along\n   * @returns {View}\n   */\n  showView(view = this._view, ...args) {\n    this.getRegion().show(view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Shows a view in the region of the app's view\n   *\n   * @public\n   * @method showChildView\n   * @param {String} regionName - Name of region to show in\n   * @param {View} view - Child view instance\n   * @param {...args} Additional args that get passed along\n   * @returns {View} - Child view instance\n   */\n  showChildView(regionName, view, ...args) {\n    this.getView().showChildView(regionName, view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Returns view from the App view by region name.\n   *\n   * @public\n   * @method getChildView\n   * @param {String} regionName - Name of region to get view from\n   * @returns {View}\n   */\n  getChildView(regionName) {\n    return this.getView().getChildView(regionName);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin, ViewEventsMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport { MnObject, View } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers',\n  'viewOptions',\n  'region'\n];\n\n/**\n * Reusable Marionette.MnObject with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = MnObject.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: View,\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    // StateMixin\n    this._initState(options);\n\n    MnObject.call(this, options);\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions) {\n    const region = this.getRegion();\n\n    if(this._isShown) {\n      throw new Error('Component has already been shown in a region.');\n    }\n\n    if(!region) {\n      throw new Error('Component has no defined region.');\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Returns component region.\n   *\n   * @public\n   * @method getRegion\n   * @memberOf Component\n   * @returns Component region\n   */\n  getRegion() {\n    return this.region;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Error('\"ViewClass\" must be a view class or a function that returns a view class');\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    // ViewEventMixin\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    this.showView(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Override this to change how the component's view is shown in the region\n   *\n   * @public\n   * @method showView\n   * @memberOf Component\n   * @param {Object} view - view built from a viewClass and viewOptions\n   */\n  showView(view) {\n    // Show the view in the region\n    this.getRegion().show(view);\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy() {\n    if(this._shouldDestroy) {\n      MnObject.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion(options) {\n    const region = this.getRegion();\n\n    if(region) {\n      this.stopListening(region, 'empty');\n      region.empty(options);\n    }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy(options) {\n    this._emptyRegion(options);\n\n    this._shouldDestroy = true;\n\n    this._destroy(options);\n\n    return this;\n  }\n});\n\n_.extend(Component.prototype, StateMixin, ViewEventsMixin);\n\nexport default Component;\n","import _ from 'underscore';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\n/**\n * @module Toolkit\n */\n\nconst VERSION = '<%VERSION%>';\n\nfunction MixinState(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n}\n\nexport {\n  MixinState,\n  VERSION,\n  StateMixin,\n  App,\n  Component\n};\n\nexport default {\n  MixinState,\n  VERSION,\n  StateMixin,\n  App,\n  Component\n};\n"],"names":["ClassOptions","StateModel","Backbone","Model","initState","options","_initState","delegateStateEvents","mergeOptions","_removeEventHandlers","_getStateModel","_stateModel","state","_setEventHandlers","undelegateStateEvents","bindEvents","_","result","unbindEvents","on","_destroyState","stopListening","off","prototype","isFunction","call","Error","setState","set","apply","arguments","resetStateDefaults","defaults","getState","attr","get","toggleState","val","length","hasState","has","_initChildApps","_childApps","childApps","addChildApps","_getChildStartOpts","childApp","tkOpts","_tkOpts","opts","region","getRegion","regionName","each","getOptions","opt","getOption","_startChildApp","start","extend","_shouldActWithRestart","action","_isRestarting","restartWithParent","_startChildApps","_stopChildApps","stop","startChildApp","appName","getChildApp","stopChildApp","_destroyChildApps","destroy","_buildAppFromObject","appConfig","AppClass","omit","app","buildApp","pick","_buildApp","isObject","childAppOptions","_ensureAppIsUnique","bind","addChildApp","_name","_on","partial","_removeChildApp","isRunning","getName","getChildApps","clone","removeChildApps","removeChildApp","preventDestroy","_stopRunningEvents","_runningEvents","args","_stopRunningListeners","_runningListeningTo","_isRunning","push","MnObject","listenTo","_listenTo","listenToOnce","viewEventPrefix","_buildEventProxies","viewEvents","_viewEvents","normalizeMethods","_viewTriggers","_viewEventPrefix","_proxyViewEvents","view","_childViewEventHandler","eventName","viewTriggers","isString","triggerMethod","prefix","viewEventName","App","Application","startAfterInitialized","startWithParent","stopWithParent","constructor","_ensureAppIsIntact","_isDestroyed","isRestarting","setRegion","setView","_bindRunningEvents","finallyStart","_region","_regionEventMonitor","_view","restart","attributes","triggerStart","_removeView","currentView","_onBeforeShow","_onEmpty","getView","showView","show","showChildView","getChildView","StateMixin","ChildAppsMixin","EventListenersMixin","ViewEventsMixin","Component","ViewClass","View","_shouldDestroy","showIn","viewOptions","_isShown","renderView","_destroy","_getViewClass","mixinOptions","buildView","_emptyRegion","empty","VERSION","MixinState","classDefinition","_StateMixin"],"mappings":"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","sourceRoot":"/source/"}