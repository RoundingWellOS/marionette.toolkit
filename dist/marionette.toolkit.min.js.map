{"version":3,"sources":["/source/src/marionette.toolkit.js","/source/src/mixins/state.js","/source/src/mixins/child-apps.js","/source/src/mixins/event-listeners.js","/source/src/mixins/view-events.js","/source/src/app.js","/source/src/component.js"],"names":["MixinState","classDefinition","_StateMixin","StateMixin","prototype","StateModel","_","omit","extend","ClassOptions","Backbone","Model","initState","options","arguments","length","undefined","this","_initState","delegateStateEvents","mergeOptions","_removeEventHandlers","_getStateModel","_stateModel","state","_setEventHandlers","undelegateStateEvents","bindEvents","result","unbindEvents","on","_destroyState","stopListening","off","isFunction","call","Error","setState","set","apply","resetStateDefaults","defaults","getState","attr","get","toggleState","val","hasState","has","ChildAppsMixin","_initChildApps","_childApps","childApps","addChildApps","_getChildStartOpts","childApp","_this","tkOpts","_tkOpts","opts","region","getRegion","regionName","each","getOptions","opt","getOption","_startChildApp","start","_startChildApps","_this2","_isRestarting","restartWithParent","_stopChildApp","stop","_stopChildApps","_this3","startChildApp","appName","getChildApp","stopChildApp","_destroyChildApps","destroy","_buildAppFromObject","appConfig","AppClass","app","buildApp","pick","_buildApp","isObject","childAppOptions","_ensureAppIsUnique","bind","addChildApp","_name","_on","partial","_removeChildApp","isRunning","getName","getChildApps","clone","removeChildApps","removeChildApp","preventDestroy","EventListenersMixin","_stopRunningEvents","_runningEvents","args","_stopRunningListeners","_runningListeningTo","_isRunning","push","MnObject","listenTo","_listenTo","listenToOnce","viewEventPrefix","_buildEventProxies","viewEvents","_viewEvents","normalizeMethods","_viewTriggers","_viewEventPrefix","_proxyViewEvents","view","_childViewEventHandler","eventName","_len","Array","_key","viewTriggers","isString","triggerMethod","concat","prefix","viewEventName","App","Application","startAfterInitialized","startWithParent","stopWithParent","constructor","_ensureAppIsIntact","_isDestroyed","isRestarting","setRegion","setView","_bindRunningEvents","triggerStart","_region","_regionEventMonitor","_view","restart","attributes","_removeView","currentView","before:show","_onBeforeShow","empty","_onEmpty","getView","showView","_getRegion","show","showChildView","_getView","_len2","_key2","getChildView","ViewEventsMixin","Component","ViewClass","View","_shouldDestroy","showIn","viewOptions","_isShown","renderView","_destroy","_getViewClass","mixinOptions","buildView","_emptyRegion","VERSION","marionette_toolkit"],"mappings":"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","file":"marionette.toolkit.min.js","sourcesContent":["import _ from 'underscore';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\n/**\n * @module Toolkit\n */\n\nconst VERSION = '<%VERSION%>';\n\nfunction MixinState(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n}\n\nexport {\n  MixinState,\n  VERSION,\n  StateMixin,\n  App,\n  Component\n};\n\nexport default {\n  MixinState,\n  VERSION,\n  StateMixin,\n  App,\n  Component\n};\n","import _ from 'underscore';\nimport Backbone from 'backbone';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n /**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.MnObject or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    this._initState(options);\n    this.delegateStateEvents();\n\n    return this;\n  },\n\n  /**\n   * @private\n   * @method _initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   */\n  _initState(options) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   *\n   * @public\n   * @method delegateStateEvents\n   */\n  delegateStateEvents() {\n    this.undelegateStateEvents();\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events on _stateModel\n   *\n   * @public\n   * @method undelegateStateEvents\n   */\n  undelegateStateEvents() {\n    this.unbindEvents(this._stateModel);\n\n    return this;\n  },\n\n  /**\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Clean up destroy event handler, remove any listeners on _stateModel\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.undelegateStateEvents();\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Error('\"StateModel\" must be a model class or a function that returns a model class');\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Toggle a property on the _stateModel.\n   *\n   * @public\n   * @method toggleState\n   * @param {String} attr - Attribute name of stateModel.\n   * @param {val} [value] - Attribute value.\n   * @returns {Backbone.Model} - The _stateModel or attribute value.\n   */\n  toggleState(attr, val) {\n    if(arguments.length > 1) return this._stateModel.set(attr, !!val);\n\n    return this._stateModel.set(attr, !this._stateModel.get(attr));\n  },\n\n  /**\n   * Check if _stateModel has a property\n   *\n   * @public\n   * @method hasState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Boolean}\n   */\n  hasState(attr) {\n    return this._stateModel.has(attr);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n /**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n  },\n\n  _getChildStartOpts(childApp) {\n    const tkOpts = childApp._tkOpts || {};\n\n    const opts = {\n      region: this.getRegion(tkOpts.regionName)\n    };\n\n    _.each(tkOpts.getOptions, opt => {\n      opts[opt] = this.getOption(opt);\n    });\n\n    return opts;\n  },\n\n  /**\n   * Starts a `childApp` if allowed by child\n   *\n   * @private\n   * @method _startChildApp\n   */\n  _startChildApp(childApp) {\n    if(_.result(childApp, 'startWithParent')) {\n      childApp.start();\n    }\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    if(!this._isRestarting) {\n      _.each(this._childApps, this._startChildApp);\n      return;\n    }\n\n    // Handles explicit boolean values of restartWithParent\n    // restartWithParent === false does nothing\n    _.each(this._childApps, childApp => {\n      const restartWithParent = _.result(childApp, 'restartWithParent');\n      if(restartWithParent === true) {\n        childApp.start();\n        return;\n      }\n      if(restartWithParent !== false) this._startChildApp(childApp);\n    });\n  },\n\n  /**\n   * Stops a `childApp` if allowed by child\n   *\n   * @private\n   * @method _stopChildApp\n   */\n  _stopChildApp(childApp) {\n    if(_.result(childApp, 'stopWithParent')) {\n      childApp.stop();\n    }\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    if(!this._isRestarting) {\n      _.each(this._childApps, this._stopChildApp);\n      return;\n    }\n\n    // Handles explicit boolean values of restartWithParent\n    // restartWithParent === false does nothing\n    _.each(this._childApps, childApp => {\n      const restartWithParent = _.result(childApp, 'restartWithParent');\n      if(restartWithParent === true) {\n        childApp.stop();\n        return;\n      }\n      if(restartWithParent !== false) this._stopChildApp(childApp);\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {Object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp(appName, options) {\n    const childApp = this.getChildApp(appName);\n    const opts = this._getChildStartOpts(childApp);\n    return childApp.start(_.extend(opts, options));\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @param {Object} options - Stop options for app\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp(appName, options) {\n    return this.getChildApp(appName).stop(options);\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass', 'regionName', 'getOptions');\n\n    const app = this.buildApp(AppClass, options);\n\n    app._tkOpts = _.pick(appConfig, 'regionName', 'getOptions');\n\n    return app;\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Error(`A child App with name \"${ appName }\" has already been added.`);\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, _.bind(function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this));\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Error('App build failed.  Incorrect configuration.');\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    // Listener setup relative to the childApp's running state (using _on)\n    childApp._on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      childApp.start();\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, _.bind(function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this));\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport { MnObject } from 'backbone.marionette';\n\n /**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, _.bind(function(args) {\n      this.off.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, _.bind(function(args) {\n      this.stopListening.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return MnObject.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _on\n   * @returns {EventListeners}\n   */\n  _on: MnObject.prototype.on,\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return MnObject.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _listenTo\n   * @returns {EventListeners}\n   */\n  _listenTo: MnObject.prototype.listenTo,\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return MnObject.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\n\nexport default {\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default false\n   */\n  viewEventPrefix: false,\n\n  /**\n   * Constructs hashes and options for view event proxy\n   *\n   * @private\n   * @method _buildEventProxies\n   */\n  _buildEventProxies() {\n    const viewEvents = _.result(this, 'viewEvents') || {};\n    this._viewEvents = this.normalizeMethods(viewEvents);\n    this._viewTriggers = _.result(this, 'viewTriggers') || {};\n    this._viewEventPrefix = _.result(this, 'viewEventPrefix');\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  /**\n   * Event handler for view proxy\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _childViewEventHandler\n   * @param {String} - event name\n   */\n  _childViewEventHandler(eventName, ...args) {\n    const viewEvents = this._viewEvents;\n\n    if(_.isFunction(viewEvents[eventName])) {\n      viewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const viewTriggers = this._viewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if(_.isString(viewTriggers[eventName])) {\n      this.triggerMethod(viewTriggers[eventName], ...args);\n    }\n\n    const prefix = this._viewEventPrefix;\n\n    if(prefix !== false) {\n      const viewEventName = `${ prefix }:${ eventName }`;\n\n      this.triggerMethod(viewEventName, ...args);\n    }\n  }\n};\n","import _ from 'underscore';\nimport { Application } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'startWithParent',\n  'restartWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy',\n  'StateModel',\n  'stateEvents',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers'\n];\n\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Application.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Internal flag indiciate when `App` is in the process of stopping then starting.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRestarting: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n\n  /**\n   * Set this to determine if a parent `App` should maintain the child's\n   * lifecycle during a restart.\n   *\n   * @type {Boolean|Function}\n   * @default null\n   */\n  restartWithParent: null,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.restartWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ChildAppsMixin\n    this._initChildApps(options);\n\n    Application.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Error('App has already been destroyed and cannot be used.');\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Gets the value of internal `_isRestarting` flag\n   *\n   * @public\n   * @method isRestarting\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRestarting() {\n    return this._isRestarting;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options = {}) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    if(options.region) {\n      this.setRegion(options.region);\n    }\n\n    if(options.view) {\n      this.setView(options.view);\n    }\n\n    // StateMixin\n    this._initState(options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    this.triggerMethod('before:start', options);\n\n    this._isRunning = true;\n\n    this._bindRunningEvents();\n\n    this._startChildApps();\n\n    this.triggerStart(options);\n\n    return this;\n  },\n\n  /**\n   * Sets up region, view, and state events.\n   * To only be called after `isRunning` is true\n   *\n   * @private\n   * @method _bindRunningEvents\n   * @memberOf App\n   */\n  _bindRunningEvents() {\n    if(this._region) {\n      this._regionEventMonitor();\n    }\n\n    if(this._view) {\n      this._proxyViewEvents(this._view);\n    }\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Sets the app lifecycle to not running\n   * then sets the app lifecycle to running with ending state\n   *\n   * @public\n   * @method restart\n   * @memberOf App\n   * @returns {App}\n   */\n  restart() {\n    const state = this.getState().attributes;\n\n    this._isRestarting = true;\n    this.stop().start({ state });\n    this._isRestarting = false;\n\n    return this;\n  },\n\n  /**\n   * Triggers start event.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#start - passes options\n   * @returns\n   */\n  triggerStart(options) {\n    this.triggerMethod('start', options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._stopChildApps();\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    // Running events are cleaned up after stop so that\n    // `stop` event handlers still fire\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return this;\n    }\n\n    this.stop();\n\n    this._removeView();\n\n    this._destroyChildApps();\n\n    Application.prototype.destroy.apply(this, arguments);\n\n    return this;\n  },\n\n  /**\n   * Set the Application's Region\n   *\n   * @public\n   * @method setRegion\n   * @memberOf App\n   * @param {Region} [region] - Region to use with the app\n   * @returns {Region}\n   */\n  setRegion(region) {\n    if(this._region) {\n      this.stopListening(this._region);\n    }\n\n    this._region = region;\n\n    if(region.currentView) {\n      this.setView(region.currentView);\n    }\n\n    if(this._isRunning) {\n      this._regionEventMonitor();\n    }\n\n    return region;\n  },\n\n  /**\n   * Monitors the apps region before:show event so the region's view\n   * is available to the app\n   *\n   * @private\n   * @method _regionEventMonitor\n   * @memberOf App\n   */\n  _regionEventMonitor() {\n    this.listenTo(this._region, {\n      'before:show': this._onBeforeShow,\n      'empty': this._onEmpty\n    });\n  },\n\n  /**\n   * Region monitor handler which sets the app's view to the region's view\n   *\n   * @private\n   * @method _onBeforeShow\n   * @memberOf App\n   */\n  _onBeforeShow(region, view) {\n    this.setView(view);\n  },\n\n  /**\n   * Region monitor handler which empties the region's view\n   *\n   * @private\n   * @method _onEmpty\n   * @memberOf App\n   */\n  _onEmpty(region, view) {\n    if(view !== this._view) return;\n\n    this._removeView();\n  },\n\n  /**\n   * Region monitor handler which deletes the region's view and listeners to view\n   *\n   * @private\n   * @method _removeView\n   * @memberOf App\n   */\n  _removeView() {\n    if(this._view) {\n      this.stopListening(this._view);\n      delete this._view;\n    }\n  },\n\n  /**\n   * Get the Application's Region or\n   * Get a region from the Application's View\n   *\n   * @public\n   * @method getRegion\n   * @memberOf App\n   * @param {String} [regionName] - Optional regionName to get from the view\n   * @returns {Region}\n   */\n  getRegion(regionName) {\n    if(!regionName) {\n      return this._region;\n    }\n\n    return this.getView().getRegion(regionName);\n  },\n\n  /**\n   * Set the Application's View\n   *\n   * @public\n   * @method setView\n   * @memberOf App\n   * @param {View} [view] - View to use with the app\n   * @returns {View}\n   */\n  setView(view) {\n    if(this._view === view) {\n      return view;\n    }\n\n    if(this._view) {\n      this.stopListening(this._view);\n    }\n\n    this._view = view;\n\n    // ViewEventsMixin\n    if(this._isRunning) {\n      this._proxyViewEvents(view);\n    }\n\n    // Internal non-running listener\n    this._listenTo(this._view, 'destroy', this._removeView);\n\n    return view;\n  },\n\n  /**\n   * Get the Application's View\n   *\n   * @public\n   * @method getView\n   * @memberOf App\n   * @returns {View}\n   */\n  getView() {\n    return this._view || this._region && this._region.currentView;\n  },\n\n  /**\n   * Shows a view in the Application's region\n   *\n   * @public\n   * @method showView\n   * @param {View} view - Child view instance defaults to App's view\n   * @param {...args} Additional args that get passed along\n   * @returns {View}\n   */\n  showView(view = this._view, ...args) {\n    this.getRegion().show(view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Shows a view in the region of the app's view\n   *\n   * @public\n   * @method showChildView\n   * @param {String} regionName - Name of region to show in\n   * @param {View} view - Child view instance\n   * @param {...args} Additional args that get passed along\n   * @returns {View} - Child view instance\n   */\n  showChildView(regionName, view, ...args) {\n    this.getView().showChildView(regionName, view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Returns view from the App view by region name.\n   *\n   * @public\n   * @method getChildView\n   * @param {String} regionName - Name of region to get view from\n   * @returns {View}\n   */\n  getChildView(regionName) {\n    return this.getView().getChildView(regionName);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin, ViewEventsMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport { MnObject, View } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers',\n  'viewOptions',\n  'region'\n];\n\n/**\n * Reusable Marionette.MnObject with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = MnObject.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: View,\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    // StateMixin\n    this._initState(options);\n\n    MnObject.call(this, options);\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions) {\n    const region = this.getRegion();\n\n    if(this._isShown) {\n      throw new Error('Component has already been shown in a region.');\n    }\n\n    if(!region) {\n      throw new Error('Component has no defined region.');\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Returns component region.\n   *\n   * @public\n   * @method getRegion\n   * @memberOf Component\n   * @returns Component region\n   */\n  getRegion() {\n    return this.region;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Error('\"ViewClass\" must be a view class or a function that returns a view class');\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    // ViewEventMixin\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    this.showView(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Override this to change how the component's view is shown in the region\n   *\n   * @public\n   * @method showView\n   * @memberOf Component\n   * @param {Object} view - view built from a viewClass and viewOptions\n   */\n  showView(view) {\n    // Show the view in the region\n    this.getRegion().show(view);\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy() {\n    if(this._shouldDestroy) {\n      MnObject.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion(options) {\n    const region = this.getRegion();\n\n    if(region) {\n      this.stopListening(region, 'empty');\n      region.empty(options);\n    }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy(options) {\n    this._emptyRegion(options);\n\n    this._shouldDestroy = true;\n\n    this._destroy(options);\n\n    return this;\n  }\n});\n\n_.extend(Component.prototype, StateMixin, ViewEventsMixin);\n\nexport default Component;\n"],"sourceRoot":"/source/"}