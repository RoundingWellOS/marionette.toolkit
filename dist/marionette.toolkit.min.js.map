{"version":3,"sources":["/source/src/mixins/state.js","/source/src/mixins/child-apps.js","/source/src/mixins/event-listeners.js","/source/src/app.js","/source/src/component.js","/source/src/marionette.toolkit.js"],"names":["ClassOptions","StateMixin","StateModel","Backbone","Model","initState","options","arguments","length","undefined","this","mergeOptions","_removeEventHandlers","_getStateModel","_stateModel","state","_setEventHandlers","unbindEvents","stopListening","off","_destroyState","bindEvents","_","result","on","prototype","isFunction","call","Marionette","Error","name","message","setState","set","apply","resetStateDefaults","defaults","getState","attr","get","ChildAppsMixin","_initChildApps","_childApps","childApps","addChildApps","_initListeners","start","_startChildApps","before:stop","_stopChildApps","before:destroy","_destroyChildApps","each","childApp","stop","startChildApp","appName","getChildApp","stopChildApp","destroy","_buildAppFromObject","appConfig","AppClass","omit","buildApp","_buildApp","isObject","extend","childAppOptions","_ensureAppIsUnique","bind","addChildApp","_name","partial","_removeChildApp","isRunning","getName","getChildApps","clone","removeChildApps","removeChildApp","preventDestroy","EventListenersMixin","_stopRunningEvents","_runningEvents","args","_stopRunningListeners","_runningListeningTo","_isRunning","push","Object","listenTo","listenToOnce","App","Application","startAfterInitialized","startWithParent","stopWithParent","constructor","_ensureAppIsIntact","_isDestroyed","opts","setRegion","region","getInitState","triggerMethod","triggerStart","_region","showChildView","regionName","view","appView","getView","_len","Array","_key","concat","getChildView","Component","ViewClass","View","viewEventPrefix","viewOptions","_shouldDestroy","showIn","show","getRegion","_isShown","renderView","_destroy","_getViewClass","mixinOptions","buildView","currentView","_proxyViewEvents","prefix","toArray","rootEvent","splice","attributes","_emptyRegion","empty","previousToolkit","Toolkit","noConflict","MixinState","classDefinition","_StateMixin","VERSION"],"mappings":"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","file":"marionette.toolkit.min.js","sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n /**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.Object or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events and remove any listeners on _stateModel\n   * Clean up destroy event handler\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.unbindEvents(this._stateModel);\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidStateModelError',\n      message: '\"StateModel\" must be a model class or a function that returns a model class'\n    });\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n /**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n\n    this._initListeners();\n  },\n\n  /**\n   * The child apps should be handled while the app is running;\n   * After start, before stop, and before destroy.\n   *\n   * @private\n   * @method _initListeners\n   */\n  _initListeners() {\n    this.on({\n      'start': this._startChildApps,\n      'before:stop': this._stopChildApps,\n      'before:destroy': this._destroyChildApps\n    });\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'startWithParent')) {\n        childApp.start();\n      }\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'stopWithParent')) {\n        childApp.stop();\n      }\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {Object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp(appName, options) {\n    this.getChildApp(appName).start(options);\n\n    return this;\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp(appName) {\n    this.getChildApp(appName).stop();\n\n    return this;\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass');\n\n    return this.buildApp(AppClass, options);\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Marionette.Error({\n        name: 'DuplicateChildAppError',\n        message: `A child App with name \"${ appName }\" has already been added.`\n      });\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, _.bind(function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this));\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Marionette.Error({\n        name: 'AddChildAppError',\n        message: 'App build failed.  Incorrect configuration.'\n      });\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    childApp.on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      childApp.start();\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, _.bind(function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this));\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\n /**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, _.bind(function(args) {\n      this.off.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, _.bind(function(args) {\n      this.stopListening.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return Marionette.Object.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return Marionette.Object.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return Marionette.Object.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\n\nconst ClassOptions = [\n  'startWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy',\n  'StateModel',\n  'stateEvents'\n];\n\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Marionette.Application.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    this.mergeOptions(options, ClassOptions);\n\n    this._initChildApps(options);\n\n    Marionette.Application.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Marionette.Error({\n        name: 'AppDestroyedError',\n        message: 'App has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    const opts = _.extend({}, options);\n\n    this.setRegion(opts.region);\n\n    opts.state = this.getInitState(opts.state);\n\n    this.triggerMethod('before:start', options);\n\n    this._isRunning = true;\n\n    this.initState(opts);\n\n    this.triggerStart(opts);\n\n    return this;\n  },\n\n  /**\n   * Set the Application's Region after instantiation\n   *\n   * @public\n   * @method setRegion\n   * @memberOf App\n   * @param {Region} [region] - Region to use with the app\n   * @returns {App}\n   */\n\n  setRegion(region) {\n    if(!region) {\n      return this;\n    }\n\n    this._region = region;\n\n    return this;\n  },\n\n  /**\n   * Returns state.\n   * Override to extend state\n   *\n   * @public\n   * @method getInitState\n   * @memberOf App\n   * @param {Object} [state] - initial app state\n   * @returns state\n   */\n\n  getInitState(state) {\n    return state;\n  },\n\n  /**\n   * Triggers start event.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#start - passes options\n   * @returns\n   */\n  triggerStart(options) {\n    this.triggerMethod('start', options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    // Running events are cleaned up after stop so that\n    // `stop` event handlers still fire\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return;\n    }\n\n    this.stop();\n\n    Marionette.Object.prototype.destroy.apply(this, arguments);\n  },\n\n  /**\n   * Shows a view in the region of the app's view\n   *\n   * @public\n   * @method showChildView\n   * @param {String} regionName - Name of region to show in\n   * @param {View} view - Child view instance\n   * @param {...args} Additional args that get passed along\n   * @returns {View} - Child view instance\n   */\n  showChildView(regionName, view, ...args) {\n    const appView = this.getView();\n\n    if(!appView) {\n      return false;\n    }\n\n    appView.showChildView(regionName, view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Returns view from the App view by region name.\n   *\n   * @public\n   * @method getChildView\n   * @param {String} regionName - Name of region to get view from\n   * @returns {View}\n   */\n  getChildView(regionName) {\n    const appView = this.getView();\n\n    if(!appView) {\n      return false;\n    }\n\n    return appView.getChildView(regionName);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\n\nconst ClassOptions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewOptions',\n  'region'\n];\n/**\n * Reusable Marionette.Object with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = Marionette.Object.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: Marionette.View,\n\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default 'view'\n   */\n  viewEventPrefix: 'view',\n\n  /**\n   * Options hash passed to the view when built.\n   * @type {Object|Function}\n   * @default '{}'\n   */\n  viewOptions: {},\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    this.initState(options);\n\n    Marionette.Object.call(this, options);\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions) {\n    const region = this.getRegion();\n\n    if(this._isShown) {\n      throw new Marionette.Error({\n        name: 'ComponentShowError',\n        message: 'Component has already been shown in a region.'\n      });\n    }\n\n    if(!region) {\n      throw new Marionette.Error({\n        name: 'ComponentRegionError',\n        message: 'Component has no defined region.'\n      });\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Returns component region.\n   *\n   * @public\n   * @method getRegion\n   * @memberOf Component\n   * @returns Component region\n   */\n  getRegion() {\n    return this.region;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidViewClassError',\n      message: '\"ViewClass\" must be a view class or a function that returns a view class'\n    });\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    // Show the view in the region\n    this.getRegion().show(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    const prefix = this.viewEventPrefix;\n\n    view.on('all', function() {\n      const args = _.toArray(arguments);\n      const rootEvent = args[0];\n\n      args[0] = `${ prefix }:${ rootEvent }`;\n      args.splice(1, 0, view);\n\n      this.triggerMethod.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy() {\n    if(this._shouldDestroy) {\n      Marionette.Object.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion(options) {\n    const region = this.getRegion();\n\n    if(region) {\n      this.stopListening(region, 'empty');\n      region.empty(options);\n    }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy(options) {\n    this._emptyRegion(options);\n\n    this._shouldDestroy = true;\n\n    this._destroy(options);\n  }\n});\n\n_.extend(Component.prototype, StateMixin);\n\nexport default Component;\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\n/**\n * @module Toolkit\n */\n\nconst previousToolkit = Marionette.Toolkit;\n\nconst Toolkit = Marionette.Toolkit = {};\n\nToolkit.noConflict = function() {\n  Marionette.Toolkit = previousToolkit;\n  return this;\n};\n\nToolkit.MixinState = function(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n};\n\nToolkit.VERSION = '<%VERSION%>';\n\nToolkit.StateMixin = StateMixin;\n\nToolkit.App = App;\n\nToolkit.Component = Component;\n\nexport default Toolkit;\n"],"sourceRoot":"/source/"}