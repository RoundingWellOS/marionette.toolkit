{"version":3,"file":"marionette.toolkit.min.js","sources":["../src/mixins/state.js","../src/mixins/child-apps.js","../src/mixins/event-listeners.js","../src/mixins/view-events.js","../src/app.js","../src/component.js","../src/marionette.toolkit.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n/**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.MnObject or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    this._initState(options);\n    this.delegateStateEvents();\n\n    return this;\n  },\n\n  /**\n   * @private\n   * @method _initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   */\n  _initState(options) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   *\n   * @public\n   * @method delegateStateEvents\n   */\n  delegateStateEvents() {\n    this.undelegateStateEvents();\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events on _stateModel\n   *\n   * @public\n   * @method undelegateStateEvents\n   */\n  undelegateStateEvents() {\n    this.unbindEvents(this._stateModel);\n\n    return this;\n  },\n\n  /**\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Clean up destroy event handler, remove any listeners on _stateModel\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.undelegateStateEvents();\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Error('\"StateModel\" must be a model class or a function that returns a model class');\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Toggle a property on the _stateModel.\n   *\n   * @public\n   * @method toggleState\n   * @param {String} attr - Attribute name of stateModel.\n   * @param {val} [value] - Attribute value.\n   * @returns {Backbone.Model} - The _stateModel or attribute value.\n   */\n  toggleState(attr, val) {\n    if(arguments.length > 1) return this._stateModel.set(attr, !!val);\n\n    return this._stateModel.set(attr, !this._stateModel.get(attr));\n  },\n\n  /**\n   * Check if _stateModel has a property\n   *\n   * @public\n   * @method hasState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Boolean}\n   */\n  hasState(attr) {\n    return this._stateModel.has(attr);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n/**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n  },\n\n  /**\n   * Finds `regionName` and `getOptions` for the childApp\n   *\n   * @private\n   * @method _getChildStartOpts\n   */\n  _getChildStartOpts(childApp) {\n    const tkOpts = childApp._tkOpts || {};\n\n    const opts = {\n      region: this.getRegion(tkOpts.regionName)\n    };\n\n    _.each(tkOpts.getOptions, opt => {\n      opts[opt] = this.getOption(opt);\n    });\n\n    return opts;\n  },\n\n  /**\n   * Starts a `childApp`\n   *\n   * @private\n   * @method _startChildApp\n   */\n  _startChildApp(childApp, options) {\n    const opts = this._getChildStartOpts(childApp);\n    return childApp.start(_.extend(opts, options));\n  },\n\n  /**\n   * Handles explicit boolean values of restartWithParent\n   * restartWithParent === false does nothing\n   *\n   * @private\n   * @method _shouldStartWithRestart\n   */\n  _shouldActWithRestart(childApp, action) {\n    if(!this._isRestarting) return true;\n    const restartWithParent = _.result(childApp, 'restartWithParent');\n    if(restartWithParent === true) return true;\n    if(restartWithParent !== false && _.result(childApp, action)) return true;\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    const action = 'startWithParent';\n    _.each(this._childApps, childApp => {\n      if(!this._shouldActWithRestart(childApp, action)) return;\n      if(!this._isRestarting && !_.result(childApp, action)) return;\n      this._startChildApp(childApp);\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    const action = 'stopWithParent';\n    _.each(this._childApps, childApp => {\n      if(!this._shouldActWithRestart(childApp, action)) return;\n      if(!this._isRestarting && !_.result(childApp, action)) return;\n      childApp.stop();\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {Object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp(appName, options) {\n    const childApp = this.getChildApp(appName);\n    return this._startChildApp(childApp, options);\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @param {Object} options - Stop options for app\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp(appName, options) {\n    return this.getChildApp(appName).stop(options);\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass', 'regionName', 'getOptions');\n\n    const app = this.buildApp(AppClass, options);\n\n    app._tkOpts = _.pick(appConfig, 'regionName', 'getOptions');\n\n    return app;\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Error(`A child App with name \"${ appName }\" has already been added.`);\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, _.bind(function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this));\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Error('App build failed.  Incorrect configuration.');\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    // Listener setup relative to the childApp's running state (using _on)\n    childApp._on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      this._startChildApp(childApp);\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, _.bind(function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this));\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport { MnObject } from 'backbone.marionette';\n\n/**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, _.bind(function(args) {\n      this.off.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, _.bind(function(args) {\n      this.stopListening.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return MnObject.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _on\n   * @returns {EventListeners}\n   */\n  _on: MnObject.prototype.on,\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return MnObject.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Keep a copy of non-running on for internal use\n   *\n   * @private\n   * @method _listenTo\n   * @returns {EventListeners}\n   */\n  _listenTo: MnObject.prototype.listenTo,\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return MnObject.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\n\nexport default {\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default false\n   */\n  viewEventPrefix: false,\n\n  /**\n   * Constructs hashes and options for view event proxy\n   *\n   * @private\n   * @method _buildEventProxies\n   */\n  _buildEventProxies() {\n    const viewEvents = _.result(this, 'viewEvents') || {};\n    this._viewEvents = this.normalizeMethods(viewEvents);\n    this._viewTriggers = _.result(this, 'viewTriggers') || {};\n    this._viewEventPrefix = _.result(this, 'viewEventPrefix');\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  /**\n   * Event handler for view proxy\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _childViewEventHandler\n   * @param {String} - event name\n   */\n  _childViewEventHandler(eventName, ...args) {\n    const viewEvents = this._viewEvents;\n\n    if(_.isFunction(viewEvents[eventName])) {\n      viewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const viewTriggers = this._viewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if(_.isString(viewTriggers[eventName])) {\n      this.triggerMethod(viewTriggers[eventName], ...args);\n    }\n\n    const prefix = this._viewEventPrefix;\n\n    if(prefix !== false) {\n      const viewEventName = `${ prefix }:${ eventName }`;\n\n      this.triggerMethod(viewEventName, ...args);\n    }\n  }\n};\n","import _ from 'underscore';\nimport { Application } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'startWithParent',\n  'restartWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy',\n  'StateModel',\n  'stateEvents',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers'\n];\n\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Application.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Internal flag indiciate when `App` is in the process of stopping then starting.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRestarting: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n\n  /**\n   * Set this to determine if a parent `App` should maintain the child's\n   * lifecycle during a restart.\n   *\n   * @type {Boolean|Function}\n   * @default null\n   */\n  restartWithParent: null,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.restartWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ChildAppsMixin\n    this._initChildApps(options);\n\n    Application.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Error('App has already been destroyed and cannot be used.');\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Gets the value of internal `_isRestarting` flag\n   *\n   * @public\n   * @method isRestarting\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRestarting() {\n    return this._isRestarting;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options = {}) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    if(options.region) {\n      this.setRegion(options.region);\n    }\n\n    if(options.view) {\n      this.setView(options.view);\n    }\n\n    // StateMixin\n    this._initState(options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    this.triggerMethod('before:start', options);\n\n    this._isRunning = true;\n\n    this._bindRunningEvents();\n\n    this.triggerStart(options);\n\n    return this;\n  },\n\n  /**\n   * Sets up region, view, and state events.\n   * To only be called after `isRunning` is true\n   *\n   * @private\n   * @method _bindRunningEvents\n   * @memberOf App\n   */\n  _bindRunningEvents() {\n    if(this._region) {\n      this._regionEventMonitor();\n    }\n\n    if(this._view) {\n      this._proxyViewEvents(this._view);\n    }\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Sets the app lifecycle to not running\n   * then sets the app lifecycle to running with ending state\n   *\n   * @public\n   * @method restart\n   * @memberOf App\n   * @returns {App}\n   */\n  restart() {\n    const state = this.getState().attributes;\n\n    this._isRestarting = true;\n    this.stop().start({ state });\n    this._isRestarting = false;\n\n    return this;\n  },\n\n  /**\n   * Starts children and triggers start event\n   * For calling within `triggerStart`\n   *\n   * @public\n   * @method finallyStart\n   * @memberOf App\n   * @event App#start - passes any arguments\n   * @returns\n   */\n  finallyStart() {\n    this._startChildApps();\n    this.triggerMethod('start', ...arguments);\n  },\n\n  /**\n   * Triggers start event via finallyStart.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @returns\n   */\n  triggerStart(options) {\n    this.finallyStart(options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._stopChildApps();\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    // Running events are cleaned up after stop so that\n    // `stop` event handlers still fire\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return this;\n    }\n\n    this.stop();\n\n    this._removeView();\n\n    this._destroyChildApps();\n\n    Application.prototype.destroy.apply(this, arguments);\n\n    return this;\n  },\n\n  /**\n   * Set the Application's Region\n   *\n   * @public\n   * @method setRegion\n   * @memberOf App\n   * @param {Region} [region] - Region to use with the app\n   * @returns {Region}\n   */\n  setRegion(region) {\n    if(this._region) {\n      this.stopListening(this._region);\n    }\n\n    this._region = region;\n\n    if(region.currentView) {\n      this.setView(region.currentView);\n    }\n\n    if(this._isRunning) {\n      this._regionEventMonitor();\n    }\n\n    return region;\n  },\n\n  /**\n   * Monitors the apps region before:show event so the region's view\n   * is available to the app\n   *\n   * @private\n   * @method _regionEventMonitor\n   * @memberOf App\n   */\n  _regionEventMonitor() {\n    this.listenTo(this._region, {\n      'before:show': this._onBeforeShow,\n      'empty': this._onEmpty\n    });\n  },\n\n  /**\n   * Region monitor handler which sets the app's view to the region's view\n   *\n   * @private\n   * @method _onBeforeShow\n   * @memberOf App\n   */\n  _onBeforeShow(region, view) {\n    this.setView(view);\n  },\n\n  /**\n   * Region monitor handler which empties the region's view\n   *\n   * @private\n   * @method _onEmpty\n   * @memberOf App\n   */\n  _onEmpty(region, view) {\n    if(view !== this._view) return;\n\n    this._removeView();\n  },\n\n  /**\n   * Region monitor handler which deletes the region's view and listeners to view\n   *\n   * @private\n   * @method _removeView\n   * @memberOf App\n   */\n  _removeView() {\n    if(this._view) {\n      this.stopListening(this._view);\n      delete this._view;\n    }\n  },\n\n  /**\n   * Get the Application's Region or\n   * Get a region from the Application's View\n   *\n   * @public\n   * @method getRegion\n   * @memberOf App\n   * @param {String} [regionName] - Optional regionName to get from the view\n   * @returns {Region}\n   */\n  getRegion(regionName) {\n    if(!regionName) {\n      return this._region;\n    }\n\n    return this.getView().getRegion(regionName);\n  },\n\n  /**\n   * Set the Application's View\n   *\n   * @public\n   * @method setView\n   * @memberOf App\n   * @param {View} [view] - View to use with the app\n   * @returns {View}\n   */\n  setView(view) {\n    if(this._view === view) {\n      return view;\n    }\n\n    if(this._view) {\n      this.stopListening(this._view);\n    }\n\n    this._view = view;\n\n    // ViewEventsMixin\n    if(this._isRunning) {\n      this._proxyViewEvents(view);\n    }\n\n    // Internal non-running listener\n    this._listenTo(this._view, 'destroy', this._removeView);\n\n    return view;\n  },\n\n  /**\n   * Get the Application's View\n   *\n   * @public\n   * @method getView\n   * @memberOf App\n   * @returns {View}\n   */\n  getView() {\n    return this._view || this._region && this._region.currentView;\n  },\n\n  /**\n   * Shows a view in the Application's region\n   *\n   * @public\n   * @method showView\n   * @param {View} view - Child view instance defaults to App's view\n   * @param {...args} Additional args that get passed along\n   * @returns {View}\n   */\n  showView(view = this._view, ...args) {\n    this.getRegion().show(view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Shows a view in the region of the app's view\n   *\n   * @public\n   * @method showChildView\n   * @param {String} regionName - Name of region to show in\n   * @param {View} view - Child view instance\n   * @param {...args} Additional args that get passed along\n   * @returns {View} - Child view instance\n   */\n  showChildView(regionName, view, ...args) {\n    this.getView().showChildView(regionName, view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Returns view from the App view by region name.\n   *\n   * @public\n   * @method getChildView\n   * @param {String} regionName - Name of region to get view from\n   * @returns {View}\n   */\n  getChildView(regionName) {\n    return this.getView().getChildView(regionName);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin, ViewEventsMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport { Application, View } from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ViewEventsMixin from './mixins/view-events';\n\nconst ClassOptions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewEvents',\n  'viewTriggers',\n  'viewOptions'\n];\n\n/**\n * Reusable Marionette.MnObject with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = Application.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: View,\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    this.options = _.extend({}, _.result(this, 'options'), options);\n\n    // ViewEventMixin\n    this._buildEventProxies();\n\n    // StateMixin\n    this._initState(options);\n\n    Application.call(this, options);\n\n    // StateMixin\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this._region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @param {Object} [regionOptions] - Options hash passed to the region on show.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions, regionOptions) {\n    const region = this.getRegion();\n\n    if(!region) {\n      throw new Error('Component has no defined region.');\n    }\n\n    const view = this._getView(viewOptions);\n\n    this.stopListening(region.currentView, 'destroy', this.destroy);\n\n    this.triggerMethod('before:show', this, view, viewOptions, regionOptions);\n\n    this.showView(view, regionOptions);\n\n    this.listenTo(region.currentView, 'destroy', this.destroy);\n\n    this.triggerMethod('show', this, view, viewOptions, regionOptions);\n\n    return this;\n  },\n\n  /**\n   * Empty the Components region without destroying it\n   *\n   * @public\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method empty\n   * @memberOf Component\n   * @returns {Component}\n   */\n  empty() {\n    const region = this.getRegion();\n\n    if(!region) {\n      throw new Error('Component has no defined region.');\n    }\n\n    this.stopListening(region.currentView, 'destroy', this.destroy);\n\n    region.empty();\n\n    return this;\n  },\n\n  /**\n   * Get the Component view instance.\n   *\n   * @private\n   * @method _getView\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // ViewEventMixin\n    this._proxyViewEvents(view);\n\n    return view;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Error('\"ViewClass\" must be a view class or a function that returns a view class');\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to Mn.Application `destroy`\n   * @memberOf Component\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return this;\n    }\n\n    const region = this.getRegion();\n    if(region) region.empty();\n\n    Application.prototype.destroy.apply(this, arguments);\n\n    return this;\n  }\n}, {\n  /**\n   * Sets the region for a Component Class\n   *\n   * @public\n   * @method setRegion\n   * @param {Marionette.Region} - region definition for instantiated components\n   * @memberOf Component.prototype\n   */\n  setRegion(region) {\n    this.prototype.region = region;\n  }\n});\n\n_.extend(Component.prototype, StateMixin, ViewEventsMixin);\n\nexport default Component;\n","import _ from 'underscore';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\nimport { version as VERSION } from '../package.json';\n\n/**\n * @module Toolkit\n */\n\nfunction MixinState(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n}\n\nexport {\n  MixinState,\n  VERSION,\n  StateMixin,\n  App,\n  Component\n};\n"],"names":["ClassOptions","StateModel","Backbone","Model","initState","options","_initState","delegateStateEvents","this","mergeOptions","_removeEventHandlers","_getStateModel","_stateModel","state","_setEventHandlers","undelegateStateEvents","bindEvents","_","result","unbindEvents","on","_destroyState","stopListening","off","prototype","isFunction","call","Error","setState","set","apply","arguments","resetStateDefaults","defaults","getState","attr","get","toggleState","val","length","hasState","has","_initChildApps","_childApps","childApps","addChildApps","_getChildStartOpts","childApp","tkOpts","_tkOpts","opts","region","getRegion","regionName","each","getOptions","opt","_this","getOption","_startChildApp","start","extend","_shouldActWithRestart","action","_isRestarting","restartWithParent","_startChildApps","_this2","_stopChildApps","_this3","stop","startChildApp","appName","getChildApp","stopChildApp","_destroyChildApps","destroy","_buildAppFromObject","appConfig","AppClass","omit","app","buildApp","pick","_buildApp","isObject","childAppOptions","_ensureAppIsUnique","bind","addChildApp","_name","_on","partial","_removeChildApp","isRunning","getName","getChildApps","clone","removeChildApps","removeChildApp","preventDestroy","_stopRunningEvents","_runningEvents","args","_stopRunningListeners","_runningListeningTo","_isRunning","push","MnObject","listenTo","_listenTo","listenToOnce","viewEventPrefix","_buildEventProxies","viewEvents","_viewEvents","normalizeMethods","_viewTriggers","_viewEventPrefix","_proxyViewEvents","view","_childViewEventHandler","eventName","viewTriggers","isString","triggerMethod","prefix","viewEventName","App","Application","startAfterInitialized","startWithParent","stopWithParent","constructor","_ensureAppIsIntact","_isDestroyed","isRestarting","setRegion","setView","_bindRunningEvents","triggerStart","_region","_regionEventMonitor","_view","restart","attributes","finallyStart","_removeView","currentView","_onBeforeShow","_onEmpty","getView","showView","show","showChildView","getChildView","StateMixin","ChildAppsMixin","EventListenersMixin","ViewEventsMixin","Component","ViewClass","View","showIn","viewOptions","regionOptions","_getView","empty","_getViewClass","mixinOptions","buildView","classDefinition","_StateMixin"],"mappings":"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"}